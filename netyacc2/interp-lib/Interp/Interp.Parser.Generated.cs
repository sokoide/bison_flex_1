// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 11/12/2023 4:56:24PM
// Input file <Interp/Interp.Language.grammar.y - 11/12/2023 4:56:21PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace interp_lib.Interp
{
public enum Token {
    error=127,EOF=128,MINUS=129,NUMBER=130,IDENT=131,STRING=132,
    IF=133,ELSE=134,WHILE=135,EQOP=136,GTOP=137,GEOP=138,
    LTOP=139,LEOP=140,NEOP=141,ADD=142,SUB=143,MUL=144,
    DIV=145,PUT=146,GET=147,NULL=148};

public partial struct ValueType
{
       public Node node;    // node
       public int labelno;  // label number
       public int addr;     // string address
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class InterpParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[36];
  private static State[] states = new State[68];
  private static string[] nonTerms = new string[] {
      "if_prefix", "while_prefix", "expr", "cond", "program", "$accept", "stmts", 
      "stmt", "Anon@1", "Anon@2", "put_list", "put_id_num_str", };

  static InterpParser() {
    states[0] = new State(-3,new int[]{-5,1,-7,3});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{131,5,133,29,135,49,146,53,123,64,59,67,128,-2},new int[]{-8,4,-1,24,-2,46});
    states[4] = new State(-4);
    states[5] = new State(new int[]{61,6});
    states[6] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,7});
    states[7] = new State(new int[]{59,8,43,9,45,11,42,13,47,15});
    states[8] = new State(-5);
    states[9] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,10});
    states[10] = new State(new int[]{43,-28,45,-28,42,13,47,15,59,-28,41,-28,136,-28,137,-28,138,-28,139,-28,140,-28,141,-28});
    states[11] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,12});
    states[12] = new State(new int[]{43,-30,45,-30,42,13,47,15,59,-30,41,-30,136,-30,137,-30,138,-30,139,-30,140,-30,141,-30});
    states[13] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,14});
    states[14] = new State(-31);
    states[15] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,16});
    states[16] = new State(-32);
    states[17] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,18});
    states[18] = new State(-29);
    states[19] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,20});
    states[20] = new State(new int[]{41,21,43,9,45,11,42,13,47,15});
    states[21] = new State(-33);
    states[22] = new State(-34);
    states[23] = new State(-35);
    states[24] = new State(new int[]{131,5,133,29,135,49,146,53,123,64,59,67},new int[]{-8,25,-1,24,-2,46});
    states[25] = new State(new int[]{134,26,131,-6,133,-6,135,-6,146,-6,123,-6,59,-6,128,-6,125,-6});
    states[26] = new State(-7,new int[]{-9,27});
    states[27] = new State(new int[]{131,5,133,29,135,49,146,53,123,64,59,67},new int[]{-8,28,-1,24,-2,46});
    states[28] = new State(-8);
    states[29] = new State(new int[]{40,30});
    states[30] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-4,31,-3,33});
    states[31] = new State(new int[]{41,32});
    states[32] = new State(-19);
    states[33] = new State(new int[]{136,34,43,9,45,11,42,13,47,15,137,36,138,38,139,40,140,42,141,44,41,-27});
    states[34] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,35});
    states[35] = new State(new int[]{43,9,45,11,42,13,47,15,41,-21});
    states[36] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,37});
    states[37] = new State(new int[]{43,9,45,11,42,13,47,15,41,-22});
    states[38] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,39});
    states[39] = new State(new int[]{43,9,45,11,42,13,47,15,41,-23});
    states[40] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,41});
    states[41] = new State(new int[]{43,9,45,11,42,13,47,15,41,-24});
    states[42] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,43});
    states[43] = new State(new int[]{43,9,45,11,42,13,47,15,41,-25});
    states[44] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-3,45});
    states[45] = new State(new int[]{43,9,45,11,42,13,47,15,41,-26});
    states[46] = new State(-9,new int[]{-10,47});
    states[47] = new State(new int[]{131,5,133,29,135,49,146,53,123,64,59,67},new int[]{-8,48,-1,24,-2,46});
    states[48] = new State(-10);
    states[49] = new State(new int[]{40,50});
    states[50] = new State(new int[]{45,17,40,19,131,22,130,23},new int[]{-4,51,-3,33});
    states[51] = new State(new int[]{41,52});
    states[52] = new State(-20);
    states[53] = new State(new int[]{40,54});
    states[54] = new State(new int[]{131,60,130,61,132,62},new int[]{-11,55,-12,63});
    states[55] = new State(new int[]{41,56,44,58});
    states[56] = new State(new int[]{59,57});
    states[57] = new State(-11);
    states[58] = new State(new int[]{131,60,130,61,132,62},new int[]{-12,59});
    states[59] = new State(-15);
    states[60] = new State(-16);
    states[61] = new State(-17);
    states[62] = new State(-18);
    states[63] = new State(-14);
    states[64] = new State(-3,new int[]{-7,65});
    states[65] = new State(new int[]{125,66,131,5,133,29,135,49,146,53,123,64,59,67},new int[]{-8,4,-1,24,-2,46});
    states[66] = new State(-12);
    states[67] = new State(-13);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-6, new int[]{-5,128});
    rules[2] = new Rule(-5, new int[]{-7});
    rules[3] = new Rule(-7, new int[]{});
    rules[4] = new Rule(-7, new int[]{-7,-8});
    rules[5] = new Rule(-8, new int[]{131,61,-3,59});
    rules[6] = new Rule(-8, new int[]{-1,-8});
    rules[7] = new Rule(-9, new int[]{});
    rules[8] = new Rule(-8, new int[]{-1,-8,134,-9,-8});
    rules[9] = new Rule(-10, new int[]{});
    rules[10] = new Rule(-8, new int[]{-2,-10,-8});
    rules[11] = new Rule(-8, new int[]{146,40,-11,41,59});
    rules[12] = new Rule(-8, new int[]{123,-7,125});
    rules[13] = new Rule(-8, new int[]{59});
    rules[14] = new Rule(-11, new int[]{-12});
    rules[15] = new Rule(-11, new int[]{-11,44,-12});
    rules[16] = new Rule(-12, new int[]{131});
    rules[17] = new Rule(-12, new int[]{130});
    rules[18] = new Rule(-12, new int[]{132});
    rules[19] = new Rule(-1, new int[]{133,40,-4,41});
    rules[20] = new Rule(-2, new int[]{135,40,-4,41});
    rules[21] = new Rule(-4, new int[]{-3,136,-3});
    rules[22] = new Rule(-4, new int[]{-3,137,-3});
    rules[23] = new Rule(-4, new int[]{-3,138,-3});
    rules[24] = new Rule(-4, new int[]{-3,139,-3});
    rules[25] = new Rule(-4, new int[]{-3,140,-3});
    rules[26] = new Rule(-4, new int[]{-3,141,-3});
    rules[27] = new Rule(-4, new int[]{-3});
    rules[28] = new Rule(-3, new int[]{-3,43,-3});
    rules[29] = new Rule(-3, new int[]{45,-3});
    rules[30] = new Rule(-3, new int[]{-3,45,-3});
    rules[31] = new Rule(-3, new int[]{-3,42,-3});
    rules[32] = new Rule(-3, new int[]{-3,47,-3});
    rules[33] = new Rule(-3, new int[]{40,-3,41});
    rules[34] = new Rule(-3, new int[]{131});
    rules[35] = new Rule(-3, new int[]{130});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> stmts
{ }
        break;
      case 5: // stmt -> IDENT, '=', expr, ';'
{
              GenNode(ValueStack[ValueStack.Depth-2].node);
              GenCode(Op.Pop, ValueStack[ValueStack.Depth-4].node);
       }
        break;
      case 6: // stmt -> if_prefix, stmt
{
              GenCode(Op.Label, ValueStack[ValueStack.Depth-2].labelno);
       }
        break;
      case 7: // Anon@1 -> /* empty */
{
              GenCode(Op.Jump, CurrentSemanticValue.labelno = NewLabel());
              GenCode(Op.Label, ValueStack[ValueStack.Depth-3].labelno);
       }
        break;
      case 8: // stmt -> if_prefix, stmt, ELSE, Anon@1, stmt
{
              GenCode(Op.Label, ValueStack[ValueStack.Depth-2].labelno);
       }
        break;
      case 9: // Anon@2 -> /* empty */
{
              // $<labelno>$ means a value of this scope which means $2 usied by the following `stmt``
              GenCode(Op.JumpF, CurrentSemanticValue.labelno=NewLabel());
       }
        break;
      case 10: // stmt -> while_prefix, Anon@2, stmt
{
              // $1 means a value of `while_prefix`
              GenCode(Op.Jump, ValueStack[ValueStack.Depth-3].labelno);
              // $<labelno>2 means a value of $2 as `labelno` type  which is `GenCode(Op.JumpF... inside while_prefix`
              // `stmt` is $3
              GenCode(Op.Label, ValueStack[ValueStack.Depth-2].labelno);
       }
        break;
      case 11: // stmt -> PUT, '(', put_list, ')', ';'
{
              // print \n after put_list
              GenCode(Op.PutS, Pool("\n"));
       }
        break;
      case 16: // put_id_num_str -> IDENT
{ GenCode(Op.PutI, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 17: // put_id_num_str -> NUMBER
{ GenCode(Op.PutN, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 18: // put_id_num_str -> STRING
{
              GenCode(Op.PutS, Pool(ValueStack[ValueStack.Depth-1].node.S));
       }
        break;
      case 19: // if_prefix -> IF, '(', cond, ')'
{
              GenNode(ValueStack[ValueStack.Depth-2].node);
              GenCode(Op.JumpF, CurrentSemanticValue.labelno=NewLabel());
       }
        break;
      case 20: // while_prefix -> WHILE, '(', cond, ')'
{
              GenCode(Op.Label, CurrentSemanticValue.labelno=NewLabel());
              GenNode(ValueStack[ValueStack.Depth-2].node);
       }
        break;
      case 21: // cond -> expr, EQOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.EQOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 22: // cond -> expr, GTOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.GTOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 23: // cond -> expr, GEOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.GEOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 24: // cond -> expr, LTOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.LTOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 25: // cond -> expr, LEOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.LEOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 26: // cond -> expr, NEOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.NEOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 27: // cond -> expr
{ CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node; }
        break;
      case 28: // expr -> expr, '+', expr
{ CurrentSemanticValue.node = MakeNode(Token.ADD, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 29: // expr -> '-', expr
{
              CurrentSemanticValue.node = MakeNode(Token.MINUS, ValueStack[ValueStack.Depth-1].node, null);
              //Console.WriteLine("%prec MINUS {0}", $2);
       }
        break;
      case 30: // expr -> expr, '-', expr
{ CurrentSemanticValue.node = MakeNode(Token.SUB, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 31: // expr -> expr, '*', expr
{ CurrentSemanticValue.node = MakeNode(Token.MUL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 32: // expr -> expr, '/', expr
{ CurrentSemanticValue.node = MakeNode(Token.DIV, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 33: // expr -> '(', expr, ')'
{ CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node; }
        break;
      case 34: // expr -> IDENT
{ CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node; }
        break;
      case 35: // expr -> NUMBER
{ CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
