// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 11/13/2023 10:38:46PM
// Input file <Interp/Interp.Language.grammar.y - 11/13/2023 10:38:13PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace interp_lib.Interp
{
public enum Token {
    error=127,EOF=128,MINUS=129,NUMBER_LITERAL=130,IDENT=131,STRING_LITERAL=132,
    INT=133,STRING=134,IF=135,ELSE=136,WHILE=137,RETURN=138,
    EQOP=139,GTOP=140,GEOP=141,LTOP=142,LEOP=143,NEOP=144,
    ADD=145,SUB=146,MUL=147,DIV=148,PUT=149,GET=150,
    NULL=151};

public partial struct ValueType
{
       public Node node;    // node
       public int labelno;  // label number
       public int addr;     // string literal address
       public Token token;  // token
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class InterpParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[43];
  private static State[] states = new State[80];
  private static string[] nonTerms = new string[] {
      "if_prefix", "while_prefix", "expr", "cond", "program", "$accept", "stmts", 
      "stmt", "declaration", "Anon@1", "Anon@2", "put_list", "type", "put_id_num_str", 
      };

  static InterpParser() {
    states[0] = new State(-3,new int[]{-5,1,-7,3});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{131,5,133,29,134,30,135,36,137,56,149,60,138,71,123,76,59,79,128,-2},new int[]{-8,4,-9,25,-13,27,-1,31,-2,53});
    states[4] = new State(-4);
    states[5] = new State(new int[]{61,6});
    states[6] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,7});
    states[7] = new State(new int[]{59,8,43,9,45,11,42,13,47,15});
    states[8] = new State(-5);
    states[9] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,10});
    states[10] = new State(new int[]{43,-34,45,-34,42,13,47,15,59,-34,41,-34,139,-34,140,-34,141,-34,142,-34,143,-34,144,-34});
    states[11] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,12});
    states[12] = new State(new int[]{43,-36,45,-36,42,13,47,15,59,-36,41,-36,139,-36,140,-36,141,-36,142,-36,143,-36,144,-36});
    states[13] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,14});
    states[14] = new State(-37);
    states[15] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,16});
    states[16] = new State(-38);
    states[17] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,18});
    states[18] = new State(-35);
    states[19] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,20});
    states[20] = new State(new int[]{41,21,43,9,45,11,42,13,47,15});
    states[21] = new State(-39);
    states[22] = new State(-40);
    states[23] = new State(-41);
    states[24] = new State(-42);
    states[25] = new State(new int[]{59,26});
    states[26] = new State(-6);
    states[27] = new State(new int[]{131,28});
    states[28] = new State(-17);
    states[29] = new State(-18);
    states[30] = new State(-19);
    states[31] = new State(new int[]{131,5,133,29,134,30,135,36,137,56,149,60,138,71,123,76,59,79},new int[]{-8,32,-9,25,-13,27,-1,31,-2,53});
    states[32] = new State(new int[]{136,33,131,-7,133,-7,134,-7,135,-7,137,-7,149,-7,138,-7,123,-7,59,-7,128,-7,125,-7});
    states[33] = new State(-8,new int[]{-10,34});
    states[34] = new State(new int[]{131,5,133,29,134,30,135,36,137,56,149,60,138,71,123,76,59,79},new int[]{-8,35,-9,25,-13,27,-1,31,-2,53});
    states[35] = new State(-9);
    states[36] = new State(new int[]{40,37});
    states[37] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-4,38,-3,40});
    states[38] = new State(new int[]{41,39});
    states[39] = new State(-25);
    states[40] = new State(new int[]{139,41,43,9,45,11,42,13,47,15,140,43,141,45,142,47,143,49,144,51,41,-33});
    states[41] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,42});
    states[42] = new State(new int[]{43,9,45,11,42,13,47,15,41,-27});
    states[43] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,44});
    states[44] = new State(new int[]{43,9,45,11,42,13,47,15,41,-28});
    states[45] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,46});
    states[46] = new State(new int[]{43,9,45,11,42,13,47,15,41,-29});
    states[47] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,48});
    states[48] = new State(new int[]{43,9,45,11,42,13,47,15,41,-30});
    states[49] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,50});
    states[50] = new State(new int[]{43,9,45,11,42,13,47,15,41,-31});
    states[51] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-3,52});
    states[52] = new State(new int[]{43,9,45,11,42,13,47,15,41,-32});
    states[53] = new State(-10,new int[]{-11,54});
    states[54] = new State(new int[]{131,5,133,29,134,30,135,36,137,56,149,60,138,71,123,76,59,79},new int[]{-8,55,-9,25,-13,27,-1,31,-2,53});
    states[55] = new State(-11);
    states[56] = new State(new int[]{40,57});
    states[57] = new State(new int[]{45,17,40,19,131,22,132,23,130,24},new int[]{-4,58,-3,40});
    states[58] = new State(new int[]{41,59});
    states[59] = new State(-26);
    states[60] = new State(new int[]{40,61});
    states[61] = new State(new int[]{131,67,130,68,132,69},new int[]{-12,62,-14,70});
    states[62] = new State(new int[]{41,63,44,65});
    states[63] = new State(new int[]{59,64});
    states[64] = new State(-12);
    states[65] = new State(new int[]{131,67,130,68,132,69},new int[]{-14,66});
    states[66] = new State(-21);
    states[67] = new State(-22);
    states[68] = new State(-23);
    states[69] = new State(-24);
    states[70] = new State(-20);
    states[71] = new State(new int[]{131,72,130,74});
    states[72] = new State(new int[]{59,73});
    states[73] = new State(-13);
    states[74] = new State(new int[]{59,75});
    states[75] = new State(-14);
    states[76] = new State(-3,new int[]{-7,77});
    states[77] = new State(new int[]{125,78,131,5,133,29,134,30,135,36,137,56,149,60,138,71,123,76,59,79},new int[]{-8,4,-9,25,-13,27,-1,31,-2,53});
    states[78] = new State(-15);
    states[79] = new State(-16);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-6, new int[]{-5,128});
    rules[2] = new Rule(-5, new int[]{-7});
    rules[3] = new Rule(-7, new int[]{});
    rules[4] = new Rule(-7, new int[]{-7,-8});
    rules[5] = new Rule(-8, new int[]{131,61,-3,59});
    rules[6] = new Rule(-8, new int[]{-9,59});
    rules[7] = new Rule(-8, new int[]{-1,-8});
    rules[8] = new Rule(-10, new int[]{});
    rules[9] = new Rule(-8, new int[]{-1,-8,136,-10,-8});
    rules[10] = new Rule(-11, new int[]{});
    rules[11] = new Rule(-8, new int[]{-2,-11,-8});
    rules[12] = new Rule(-8, new int[]{149,40,-12,41,59});
    rules[13] = new Rule(-8, new int[]{138,131,59});
    rules[14] = new Rule(-8, new int[]{138,130,59});
    rules[15] = new Rule(-8, new int[]{123,-7,125});
    rules[16] = new Rule(-8, new int[]{59});
    rules[17] = new Rule(-9, new int[]{-13,131});
    rules[18] = new Rule(-13, new int[]{133});
    rules[19] = new Rule(-13, new int[]{134});
    rules[20] = new Rule(-12, new int[]{-14});
    rules[21] = new Rule(-12, new int[]{-12,44,-14});
    rules[22] = new Rule(-14, new int[]{131});
    rules[23] = new Rule(-14, new int[]{130});
    rules[24] = new Rule(-14, new int[]{132});
    rules[25] = new Rule(-1, new int[]{135,40,-4,41});
    rules[26] = new Rule(-2, new int[]{137,40,-4,41});
    rules[27] = new Rule(-4, new int[]{-3,139,-3});
    rules[28] = new Rule(-4, new int[]{-3,140,-3});
    rules[29] = new Rule(-4, new int[]{-3,141,-3});
    rules[30] = new Rule(-4, new int[]{-3,142,-3});
    rules[31] = new Rule(-4, new int[]{-3,143,-3});
    rules[32] = new Rule(-4, new int[]{-3,144,-3});
    rules[33] = new Rule(-4, new int[]{-3});
    rules[34] = new Rule(-3, new int[]{-3,43,-3});
    rules[35] = new Rule(-3, new int[]{45,-3});
    rules[36] = new Rule(-3, new int[]{-3,45,-3});
    rules[37] = new Rule(-3, new int[]{-3,42,-3});
    rules[38] = new Rule(-3, new int[]{-3,47,-3});
    rules[39] = new Rule(-3, new int[]{40,-3,41});
    rules[40] = new Rule(-3, new int[]{131});
    rules[41] = new Rule(-3, new int[]{132});
    rules[42] = new Rule(-3, new int[]{130});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> stmts
{ }
        break;
      case 5: // stmt -> IDENT, '=', expr, ';'
{
              GenNode(ValueStack[ValueStack.Depth-2].node);
              GenCode(Op.Pop, ValueStack[ValueStack.Depth-4].node);
       }
        break;
      case 7: // stmt -> if_prefix, stmt
{
              GenCode(Op.Label, ValueStack[ValueStack.Depth-2].labelno);
       }
        break;
      case 8: // Anon@1 -> /* empty */
{
              GenCode(Op.Jump, CurrentSemanticValue.labelno = NewLabel());
              GenCode(Op.Label, ValueStack[ValueStack.Depth-3].labelno);
       }
        break;
      case 9: // stmt -> if_prefix, stmt, ELSE, Anon@1, stmt
{
              GenCode(Op.Label, ValueStack[ValueStack.Depth-2].labelno);
       }
        break;
      case 10: // Anon@2 -> /* empty */
{
              // $<labelno>$ means a value of this scope which means $2 usied by the following `stmt``
              GenCode(Op.JumpF, CurrentSemanticValue.labelno=NewLabel());
       }
        break;
      case 11: // stmt -> while_prefix, Anon@2, stmt
{
              // $1 means a value of `while_prefix`
              GenCode(Op.Jump, ValueStack[ValueStack.Depth-3].labelno);
              // $<labelno>2 means a value of $2 as `labelno` type  which is `GenCode(Op.JumpF... inside while_prefix`
              // `stmt` is $3
              GenCode(Op.Label, ValueStack[ValueStack.Depth-2].labelno);
       }
        break;
      case 12: // stmt -> PUT, '(', put_list, ')', ';'
{
              // print \n after put_list
              GenCode(Op.PutS, PoolStringLiteral("\n"));
       }
        break;
      case 13: // stmt -> RETURN, IDENT, ';'
{
              GenCode(Op.ReturnI, ValueStack[ValueStack.Depth-2].node);
       }
        break;
      case 14: // stmt -> RETURN, NUMBER_LITERAL, ';'
{
              GenCode(Op.ReturnN, ValueStack[ValueStack.Depth-2].node);
       }
        break;
      case 17: // declaration -> type, IDENT
{ UpdateIdent(ValueStack[ValueStack.Depth-1].node.S, ValueStack[ValueStack.Depth-2].token); }
        break;
      case 18: // type -> INT
{ CurrentSemanticValue.token = Token.INT; }
        break;
      case 19: // type -> STRING
{ CurrentSemanticValue.token = Token.STRING;}
        break;
      case 22: // put_id_num_str -> IDENT
{ GenCode(Op.PutI, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 23: // put_id_num_str -> NUMBER_LITERAL
{ GenCode(Op.PutN, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 24: // put_id_num_str -> STRING_LITERAL
{
              GenCode(Op.PutS, PoolStringLiteral(ValueStack[ValueStack.Depth-1].node.S));
       }
        break;
      case 25: // if_prefix -> IF, '(', cond, ')'
{
              GenNode(ValueStack[ValueStack.Depth-2].node);
              GenCode(Op.JumpF, CurrentSemanticValue.labelno=NewLabel());
       }
        break;
      case 26: // while_prefix -> WHILE, '(', cond, ')'
{
              GenCode(Op.Label, CurrentSemanticValue.labelno=NewLabel());
              GenNode(ValueStack[ValueStack.Depth-2].node);
       }
        break;
      case 27: // cond -> expr, EQOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.EQOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 28: // cond -> expr, GTOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.GTOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 29: // cond -> expr, GEOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.GEOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 30: // cond -> expr, LTOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.LTOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 31: // cond -> expr, LEOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.LEOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 32: // cond -> expr, NEOP, expr
{ CurrentSemanticValue.node = MakeNode(Token.NEOP, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 33: // cond -> expr
{ CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node; }
        break;
      case 34: // expr -> expr, '+', expr
{ CurrentSemanticValue.node = MakeNode(Token.ADD, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 35: // expr -> '-', expr
{
              CurrentSemanticValue.node = MakeNode(Token.MINUS, ValueStack[ValueStack.Depth-1].node, null);
              //Console.WriteLine("%prec MINUS {0}", $2);
       }
        break;
      case 36: // expr -> expr, '-', expr
{ CurrentSemanticValue.node = MakeNode(Token.SUB, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 37: // expr -> expr, '*', expr
{ CurrentSemanticValue.node = MakeNode(Token.MUL, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 38: // expr -> expr, '/', expr
{ CurrentSemanticValue.node = MakeNode(Token.DIV, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
        break;
      case 39: // expr -> '(', expr, ')'
{ CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node; }
        break;
      case 40: // expr -> IDENT
{ PoolIdent(ValueStack[ValueStack.Depth-1].node.S); CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node; }
        break;
      case 41: // expr -> STRING_LITERAL
{ PoolStringLiteral(ValueStack[ValueStack.Depth-1].node.S); CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node; }
        break;
      case 42: // expr -> NUMBER_LITERAL
{ CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
