// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 11/10/2023 12:22:35AM
// Input file <Interp/Interp.Language.grammar.y - 11/10/2023 12:22:33AM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace netyacc2.Interp
{
internal enum Token {
    error=127,EOF=128,MINUS=129,NUMBER=130,IDENT=131,IF=132,
    ELSE=133,WHILE=134,EQOP=135,GTOP=136,GEOP=137,LTOP=138,
    LEOP=139,NEOP=140,PRINT=141};

internal partial struct ValueType
{
			public int n;
			public string s;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class InterpParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[30];
  private static State[] states = new State[63];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "stmts", "stmt", "expr", "if_prefix", "Anon@1", "while_prefix", 
      "Anon@2", "cond", };

  static InterpParser() {
    states[0] = new State(new int[]{141,5,131,25,132,34,134,54,123,58,59,61},new int[]{-1,1,-3,3,-4,62,-6,29,-8,51});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{141,5,131,25,132,34,134,54,123,58,59,61,128,-2},new int[]{-4,4,-6,29,-8,51});
    states[4] = new State(-3);
    states[5] = new State(new int[]{40,6});
    states[6] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,7});
    states[7] = new State(new int[]{41,8,43,10,45,12,42,14,47,16});
    states[8] = new State(new int[]{59,9});
    states[9] = new State(-5);
    states[10] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,11});
    states[11] = new State(new int[]{43,-22,45,-22,42,14,47,16,41,-22,59,-22,135,-22,136,-22,137,-22,138,-22,139,-22,140,-22});
    states[12] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,13});
    states[13] = new State(new int[]{43,-23,45,-23,42,14,47,16,41,-23,59,-23,135,-23,136,-23,137,-23,138,-23,139,-23,140,-23});
    states[14] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,15});
    states[15] = new State(-24);
    states[16] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,17});
    states[17] = new State(-25);
    states[18] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,19});
    states[19] = new State(-26);
    states[20] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,21});
    states[21] = new State(new int[]{41,22,43,10,45,12,42,14,47,16});
    states[22] = new State(-27);
    states[23] = new State(-28);
    states[24] = new State(-29);
    states[25] = new State(new int[]{61,26});
    states[26] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,27});
    states[27] = new State(new int[]{59,28,43,10,45,12,42,14,47,16});
    states[28] = new State(-6);
    states[29] = new State(new int[]{141,5,131,25,132,34,134,54,123,58,59,61},new int[]{-4,30,-6,29,-8,51});
    states[30] = new State(new int[]{133,31,141,-7,131,-7,132,-7,134,-7,123,-7,59,-7,128,-7,125,-7});
    states[31] = new State(-8,new int[]{-7,32});
    states[32] = new State(new int[]{141,5,131,25,132,34,134,54,123,58,59,61},new int[]{-4,33,-6,29,-8,51});
    states[33] = new State(-9);
    states[34] = new State(new int[]{40,35});
    states[35] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-10,36,-5,38});
    states[36] = new State(new int[]{41,37});
    states[37] = new State(-14);
    states[38] = new State(new int[]{135,39,43,10,45,12,42,14,47,16,136,41,137,43,138,45,139,47,140,49});
    states[39] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,40});
    states[40] = new State(new int[]{43,10,45,12,42,14,47,16,41,-16});
    states[41] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,42});
    states[42] = new State(new int[]{43,10,45,12,42,14,47,16,41,-17});
    states[43] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,44});
    states[44] = new State(new int[]{43,10,45,12,42,14,47,16,41,-18});
    states[45] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,46});
    states[46] = new State(new int[]{43,10,45,12,42,14,47,16,41,-19});
    states[47] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,48});
    states[48] = new State(new int[]{43,10,45,12,42,14,47,16,41,-20});
    states[49] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-5,50});
    states[50] = new State(new int[]{43,10,45,12,42,14,47,16,41,-21});
    states[51] = new State(-10,new int[]{-9,52});
    states[52] = new State(new int[]{141,5,131,25,132,34,134,54,123,58,59,61},new int[]{-4,53,-6,29,-8,51});
    states[53] = new State(-11);
    states[54] = new State(new int[]{40,55});
    states[55] = new State(new int[]{45,18,40,20,131,23,130,24},new int[]{-10,56,-5,38});
    states[56] = new State(new int[]{41,57});
    states[57] = new State(-15);
    states[58] = new State(new int[]{141,5,131,25,132,34,134,54,123,58,59,61},new int[]{-3,59,-4,62,-6,29,-8,51});
    states[59] = new State(new int[]{125,60,141,5,131,25,132,34,134,54,123,58,59,61},new int[]{-4,4,-6,29,-8,51});
    states[60] = new State(-12);
    states[61] = new State(-13);
    states[62] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,128});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-3,-4});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-4, new int[]{141,40,-5,41,59});
    rules[6] = new Rule(-4, new int[]{131,61,-5,59});
    rules[7] = new Rule(-4, new int[]{-6,-4});
    rules[8] = new Rule(-7, new int[]{});
    rules[9] = new Rule(-4, new int[]{-6,-4,133,-7,-4});
    rules[10] = new Rule(-9, new int[]{});
    rules[11] = new Rule(-4, new int[]{-8,-9,-4});
    rules[12] = new Rule(-4, new int[]{123,-3,125});
    rules[13] = new Rule(-4, new int[]{59});
    rules[14] = new Rule(-6, new int[]{132,40,-10,41});
    rules[15] = new Rule(-8, new int[]{134,40,-10,41});
    rules[16] = new Rule(-10, new int[]{-5,135,-5});
    rules[17] = new Rule(-10, new int[]{-5,136,-5});
    rules[18] = new Rule(-10, new int[]{-5,137,-5});
    rules[19] = new Rule(-10, new int[]{-5,138,-5});
    rules[20] = new Rule(-10, new int[]{-5,139,-5});
    rules[21] = new Rule(-10, new int[]{-5,140,-5});
    rules[22] = new Rule(-5, new int[]{-5,43,-5});
    rules[23] = new Rule(-5, new int[]{-5,45,-5});
    rules[24] = new Rule(-5, new int[]{-5,42,-5});
    rules[25] = new Rule(-5, new int[]{-5,47,-5});
    rules[26] = new Rule(-5, new int[]{45,-5});
    rules[27] = new Rule(-5, new int[]{40,-5,41});
    rules[28] = new Rule(-5, new int[]{131});
    rules[29] = new Rule(-5, new int[]{130});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 5: // stmt -> PRINT, '(', expr, ')', ';'
{
              Console.WriteLine(ValueStack[ValueStack.Depth-3].n);
       }
        break;
      case 6: // stmt -> IDENT, '=', expr, ';'
{
              Console.WriteLine("assign: {0}={1}", ValueStack[ValueStack.Depth-4].s, ValueStack[ValueStack.Depth-2].n);
       }
        break;
      case 7: // stmt -> if_prefix, stmt
{ ; }
        break;
      case 8: // Anon@1 -> /* empty */
{ ; }
        break;
      case 10: // Anon@2 -> /* empty */
{ ; }
        break;
      case 11: // stmt -> while_prefix, Anon@2, stmt
{ ; }
        break;
      case 12: // stmt -> '{', stmts, '}'
{ ; }
        break;
      case 14: // if_prefix -> IF, '(', cond, ')'
{ ; }
        break;
      case 15: // while_prefix -> WHILE, '(', cond, ')'
{ ; }
        break;
      case 16: // cond -> expr, EQOP, expr
{ ; }
        break;
      case 17: // cond -> expr, GTOP, expr
{ ; }
        break;
      case 18: // cond -> expr, GEOP, expr
{ ; }
        break;
      case 19: // cond -> expr, LTOP, expr
{ ; }
        break;
      case 20: // cond -> expr, LEOP, expr
{ ; }
        break;
      case 21: // cond -> expr, NEOP, expr
{ ; }
        break;
      case 22: // expr -> expr, '+', expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n + ValueStack[ValueStack.Depth-1].n; }
        break;
      case 23: // expr -> expr, '-', expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n - ValueStack[ValueStack.Depth-1].n; }
        break;
      case 24: // expr -> expr, '*', expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n * ValueStack[ValueStack.Depth-1].n; }
        break;
      case 25: // expr -> expr, '/', expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n / ValueStack[ValueStack.Depth-1].n; }
        break;
      case 26: // expr -> '-', expr
{
              CurrentSemanticValue.n = -1 * ValueStack[ValueStack.Depth-1].n;
              Console.WriteLine("%prec MINUS {0} -> {1}", ValueStack[ValueStack.Depth-1].n, CurrentSemanticValue.n);
       }
        break;
      case 27: // expr -> '(', expr, ')'
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 28: // expr -> IDENT
{ /* TODO */ CurrentSemanticValue.n = 0; }
        break;
      case 29: // expr -> NUMBER
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
