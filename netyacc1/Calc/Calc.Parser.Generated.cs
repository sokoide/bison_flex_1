// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 11/9/2023 8:02:38PM
// Input file <Calc/Calc.Language.grammar.y - 11/9/2023 8:02:26PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace netyacc1.Calc
{
internal enum Token {
    error=49,EOF=50,NUMBER=51};

internal partial struct ValueType
{
	public int n;
	public string s;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class CalcParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[9];
  private static State[] states = new State[16];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "expr", };

  static CalcParser() {
    states[0] = new State(new int[]{51,12,40,13},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{50,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{43,4,45,6,42,8,47,10,50,-2});
    states[4] = new State(new int[]{51,12,40,13},new int[]{-3,5});
    states[5] = new State(new int[]{43,-4,45,-4,42,8,47,10,50,-4,41,-4});
    states[6] = new State(new int[]{51,12,40,13},new int[]{-3,7});
    states[7] = new State(new int[]{43,-5,45,-5,42,8,47,10,50,-5,41,-5});
    states[8] = new State(new int[]{51,12,40,13},new int[]{-3,9});
    states[9] = new State(-6);
    states[10] = new State(new int[]{51,12,40,13},new int[]{-3,11});
    states[11] = new State(-7);
    states[12] = new State(-3);
    states[13] = new State(new int[]{51,12,40,13},new int[]{-3,14});
    states[14] = new State(new int[]{41,15,43,4,45,6,42,8,47,10});
    states[15] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,50});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{51});
    rules[4] = new Rule(-3, new int[]{-3,43,-3});
    rules[5] = new Rule(-3, new int[]{-3,45,-3});
    rules[6] = new Rule(-3, new int[]{-3,42,-3});
    rules[7] = new Rule(-3, new int[]{-3,47,-3});
    rules[8] = new Rule(-3, new int[]{40,-3,41});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> expr
{
			Console.WriteLine("{0}\n", ValueStack[ValueStack.Depth-1].n);
		}
        break;
      case 4: // expr -> expr, '+', expr
{
		CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n + ValueStack[ValueStack.Depth-1].n;
	}
        break;
      case 5: // expr -> expr, '-', expr
{
		CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n - ValueStack[ValueStack.Depth-1].n;
	}
        break;
      case 6: // expr -> expr, '*', expr
{
		CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n * ValueStack[ValueStack.Depth-1].n;
	}
        break;
      case 7: // expr -> expr, '/', expr
{
		CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n / ValueStack[ValueStack.Depth-1].n;
	}
        break;
      case 8: // expr -> '(', expr, ')'
{
		CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n;
	}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
